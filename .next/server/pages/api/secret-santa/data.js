"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/secret-santa/data";
exports.ids = ["pages/api/secret-santa/data"];
exports.modules = {

/***/ "next/dist/compiled/next-server/pages-api.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/pages-api.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/pages-api.runtime.dev.js");

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

module.exports = require("fs");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("path");

/***/ }),

/***/ "(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fsecret-santa%2Fdata&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Fsecret-santa%2Fdata.js&middlewareConfigBase64=e30%3D!":
/*!********************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fsecret-santa%2Fdata&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Fsecret-santa%2Fdata.js&middlewareConfigBase64=e30%3D! ***!
  \********************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   routeModule: () => (/* binding */ routeModule)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/pages-api/module.compiled */ \"(api)/./node_modules/next/dist/server/future/route-modules/pages-api/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(api)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/build/templates/helpers */ \"(api)/./node_modules/next/dist/build/templates/helpers.js\");\n/* harmony import */ var _pages_api_secret_santa_data_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./pages/api/secret-santa/data.js */ \"(api)/./pages/api/secret-santa/data.js\");\n\n\n\n// Import the userland code.\n\n// Re-export the handler (should be the default export).\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_secret_santa_data_js__WEBPACK_IMPORTED_MODULE_3__, \"default\"));\n// Re-export config.\nconst config = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_secret_santa_data_js__WEBPACK_IMPORTED_MODULE_3__, \"config\");\n// Create and export the route module that will be consumed.\nconst routeModule = new next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__.PagesAPIRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.PAGES_API,\n        page: \"/api/secret-santa/data\",\n        pathname: \"/api/secret-santa/data\",\n        // The following aren't used in production.\n        bundlePath: \"\",\n        filename: \"\"\n    },\n    userland: _pages_api_secret_santa_data_js__WEBPACK_IMPORTED_MODULE_3__\n});\n\n//# sourceMappingURL=pages-api.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LXJvdXRlLWxvYWRlci9pbmRleC5qcz9raW5kPVBBR0VTX0FQSSZwYWdlPSUyRmFwaSUyRnNlY3JldC1zYW50YSUyRmRhdGEmcHJlZmVycmVkUmVnaW9uPSZhYnNvbHV0ZVBhZ2VQYXRoPS4lMkZwYWdlcyUyRmFwaSUyRnNlY3JldC1zYW50YSUyRmRhdGEuanMmbWlkZGxld2FyZUNvbmZpZ0Jhc2U2ND1lMzAlM0QhIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQXNHO0FBQ3ZDO0FBQ0w7QUFDMUQ7QUFDNkQ7QUFDN0Q7QUFDQSxpRUFBZSx3RUFBSyxDQUFDLDREQUFRLFlBQVksRUFBQztBQUMxQztBQUNPLGVBQWUsd0VBQUssQ0FBQyw0REFBUTtBQUNwQztBQUNPLHdCQUF3QixnSEFBbUI7QUFDbEQ7QUFDQSxjQUFjLHlFQUFTO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsWUFBWTtBQUNaLENBQUM7O0FBRUQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yc3MtZmVlZC12aWV3ZXIvPzVlZmYiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUGFnZXNBUElSb3V0ZU1vZHVsZSB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2Z1dHVyZS9yb3V0ZS1tb2R1bGVzL3BhZ2VzLWFwaS9tb2R1bGUuY29tcGlsZWRcIjtcbmltcG9ydCB7IFJvdXRlS2luZCB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2Z1dHVyZS9yb3V0ZS1raW5kXCI7XG5pbXBvcnQgeyBob2lzdCB9IGZyb20gXCJuZXh0L2Rpc3QvYnVpbGQvdGVtcGxhdGVzL2hlbHBlcnNcIjtcbi8vIEltcG9ydCB0aGUgdXNlcmxhbmQgY29kZS5cbmltcG9ydCAqIGFzIHVzZXJsYW5kIGZyb20gXCIuL3BhZ2VzL2FwaS9zZWNyZXQtc2FudGEvZGF0YS5qc1wiO1xuLy8gUmUtZXhwb3J0IHRoZSBoYW5kbGVyIChzaG91bGQgYmUgdGhlIGRlZmF1bHQgZXhwb3J0KS5cbmV4cG9ydCBkZWZhdWx0IGhvaXN0KHVzZXJsYW5kLCBcImRlZmF1bHRcIik7XG4vLyBSZS1leHBvcnQgY29uZmlnLlxuZXhwb3J0IGNvbnN0IGNvbmZpZyA9IGhvaXN0KHVzZXJsYW5kLCBcImNvbmZpZ1wiKTtcbi8vIENyZWF0ZSBhbmQgZXhwb3J0IHRoZSByb3V0ZSBtb2R1bGUgdGhhdCB3aWxsIGJlIGNvbnN1bWVkLlxuZXhwb3J0IGNvbnN0IHJvdXRlTW9kdWxlID0gbmV3IFBhZ2VzQVBJUm91dGVNb2R1bGUoe1xuICAgIGRlZmluaXRpb246IHtcbiAgICAgICAga2luZDogUm91dGVLaW5kLlBBR0VTX0FQSSxcbiAgICAgICAgcGFnZTogXCIvYXBpL3NlY3JldC1zYW50YS9kYXRhXCIsXG4gICAgICAgIHBhdGhuYW1lOiBcIi9hcGkvc2VjcmV0LXNhbnRhL2RhdGFcIixcbiAgICAgICAgLy8gVGhlIGZvbGxvd2luZyBhcmVuJ3QgdXNlZCBpbiBwcm9kdWN0aW9uLlxuICAgICAgICBidW5kbGVQYXRoOiBcIlwiLFxuICAgICAgICBmaWxlbmFtZTogXCJcIlxuICAgIH0sXG4gICAgdXNlcmxhbmRcbn0pO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1wYWdlcy1hcGkuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fsecret-santa%2Fdata&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Fsecret-santa%2Fdata.js&middlewareConfigBase64=e30%3D!\n");

/***/ }),

/***/ "(api)/./pages/api/secret-santa/data.js":
/*!****************************************!*\
  !*** ./pages/api/secret-santa/data.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ handler)\n/* harmony export */ });\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! fs */ \"fs\");\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(fs__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! path */ \"path\");\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(path__WEBPACK_IMPORTED_MODULE_1__);\n\n\n// Path to our data file\nconst dataFilePath = path__WEBPACK_IMPORTED_MODULE_1___default().join(process.cwd(), \"data\", \"secret-santa.json\");\n// Ensure the data directory exists\nfunction ensureDataDirectoryExists() {\n    const dataDir = path__WEBPACK_IMPORTED_MODULE_1___default().join(process.cwd(), \"data\");\n    if (!fs__WEBPACK_IMPORTED_MODULE_0___default().existsSync(dataDir)) {\n        fs__WEBPACK_IMPORTED_MODULE_0___default().mkdirSync(dataDir, {\n            recursive: true\n        });\n    }\n}\n// Initialize data file if it doesn't exist\nfunction initializeDataFile() {\n    ensureDataDirectoryExists();\n    if (!fs__WEBPACK_IMPORTED_MODULE_0___default().existsSync(dataFilePath)) {\n        const initialData = {\n            users: [],\n            events: [],\n            assignments: []\n        };\n        fs__WEBPACK_IMPORTED_MODULE_0___default().writeFileSync(dataFilePath, JSON.stringify(initialData, null, 2));\n        return initialData;\n    }\n    return JSON.parse(fs__WEBPACK_IMPORTED_MODULE_0___default().readFileSync(dataFilePath, \"utf8\"));\n}\n// Read data from file\nfunction readData() {\n    try {\n        if (!fs__WEBPACK_IMPORTED_MODULE_0___default().existsSync(dataFilePath)) {\n            return initializeDataFile();\n        }\n        return JSON.parse(fs__WEBPACK_IMPORTED_MODULE_0___default().readFileSync(dataFilePath, \"utf8\"));\n    } catch (error) {\n        console.error(\"Error reading data file:\", error);\n        return {\n            users: [],\n            events: [],\n            assignments: []\n        };\n    }\n}\n// Write data to file\nfunction writeData(data) {\n    try {\n        ensureDataDirectoryExists();\n        fs__WEBPACK_IMPORTED_MODULE_0___default().writeFileSync(dataFilePath, JSON.stringify(data, null, 2));\n        return true;\n    } catch (error) {\n        console.error(\"Error writing data file:\", error);\n        return false;\n    }\n}\nasync function handler(req, res) {\n    // Only allow specific methods\n    if (![\n        \"GET\",\n        \"POST\",\n        \"PUT\",\n        \"DELETE\"\n    ].includes(req.method)) {\n        return res.status(405).json({\n            error: \"Method not allowed\"\n        });\n    }\n    // Initialize data if needed\n    let data = readData();\n    // Handle GET request - retrieve data\n    if (req.method === \"GET\") {\n        const { type, id, userId, role } = req.query;\n        // If no type specified, return error\n        if (!type) {\n            return res.status(400).json({\n                error: \"Type parameter is required\"\n            });\n        }\n        // Return data based on type\n        switch(type){\n            case \"users\":\n                // If admin, return all users\n                if (role === \"admin\") {\n                    return res.status(200).json(id ? data.users.find((u)=>u.id === id) : data.users);\n                } else if (id && userId) {\n                    // Check if the requester has an assignment where the requested user is the receiver\n                    const hasAssignment = data.assignments.some((a)=>a.giverId === userId && a.receiverId === id);\n                    // Allow access if the requester is requesting their own info or has an assignment with the requested user\n                    if (id === userId || hasAssignment) {\n                        return res.status(200).json(data.users.find((u)=>u.id === id));\n                    }\n                } else if (userId) {\n                    return res.status(200).json(data.users.find((u)=>u.id === userId));\n                }\n                return res.status(403).json({\n                    error: \"Unauthorized\"\n                });\n            case \"events\":\n                // If admin, return all events, otherwise return events the user is part of\n                if (role === \"admin\") {\n                    return res.status(200).json(id ? data.events.find((e)=>e.id === id) : data.events);\n                } else if (userId) {\n                    const userEvents = data.events.filter((e)=>e.participants.includes(userId) || e.adminId === userId);\n                    return res.status(200).json(id ? userEvents.find((e)=>e.id === id) : userEvents);\n                }\n                return res.status(403).json({\n                    error: \"Unauthorized\"\n                });\n            case \"assignments\":\n                // If admin, return all assignments for an event, otherwise return only the user's assignment\n                if (id) {\n                    const event = data.events.find((e)=>e.id === id);\n                    if (!event) {\n                        return res.status(404).json({\n                            error: \"Event not found\"\n                        });\n                    }\n                    if (role === \"admin\" || event.adminId === userId) {\n                        return res.status(200).json(data.assignments.filter((a)=>a.eventId === id));\n                    } else if (userId) {\n                        return res.status(200).json(data.assignments.find((a)=>a.eventId === id && a.giverId === userId));\n                    }\n                }\n                return res.status(400).json({\n                    error: \"Event ID is required\"\n                });\n            default:\n                return res.status(400).json({\n                    error: \"Invalid type parameter\"\n                });\n        }\n    }\n    // Handle POST request - create new data\n    if (req.method === \"POST\") {\n        const { type, userId, role } = req.query;\n        const payload = req.body;\n        if (!type || !payload) {\n            return res.status(400).json({\n                error: \"Type parameter and request body are required\"\n            });\n        }\n        switch(type){\n            case \"users\":\n                // Anyone can create a user (sign up)\n                if (!payload.username || !payload.password) {\n                    return res.status(400).json({\n                        error: \"Username and password are required\"\n                    });\n                }\n                // Check if username already exists\n                if (data.users.some((u)=>u.username === payload.username)) {\n                    return res.status(409).json({\n                        error: \"Username already exists\"\n                    });\n                }\n                // Create new user\n                const newUser = {\n                    id: Date.now().toString(),\n                    username: payload.username,\n                    password: payload.password,\n                    role: payload.role || \"participant\" // Default to participant role\n                };\n                data.users.push(newUser);\n                writeData(data);\n                // Don't return the password in the response\n                const { password, ...userWithoutPassword } = newUser;\n                return res.status(201).json(userWithoutPassword);\n            case \"events\":\n                // Only authenticated users can create events\n                if (!userId) {\n                    return res.status(401).json({\n                        error: \"Authentication required\"\n                    });\n                }\n                if (!payload.name) {\n                    return res.status(400).json({\n                        error: \"Event name is required\"\n                    });\n                }\n                // Create new event\n                const newEvent = {\n                    id: Date.now().toString(),\n                    name: payload.name,\n                    description: payload.description || \"\",\n                    adminId: userId,\n                    participants: payload.participants || [],\n                    created: new Date().toISOString()\n                };\n                data.events.push(newEvent);\n                writeData(data);\n                return res.status(201).json(newEvent);\n            case \"assignments\":\n                // Only admin can generate assignments\n                if (role !== \"admin\" && !data.events.some((e)=>e.id === payload.eventId && e.adminId === userId)) {\n                    return res.status(403).json({\n                        error: \"Only the event admin can generate assignments\"\n                    });\n                }\n                if (!payload.eventId) {\n                    return res.status(400).json({\n                        error: \"Event ID is required\"\n                    });\n                }\n                const event = data.events.find((e)=>e.id === payload.eventId);\n                if (!event) {\n                    return res.status(404).json({\n                        error: \"Event not found\"\n                    });\n                }\n                // Check if there are enough participants\n                if (event.participants.length < 3) {\n                    return res.status(400).json({\n                        error: \"At least 3 participants are required\"\n                    });\n                }\n                // Generate assignments\n                const givers = [\n                    ...event.participants\n                ];\n                const receivers = [\n                    ...event.participants\n                ];\n                let validAssignment = false;\n                let attempts = 0;\n                let newAssignments = [];\n                // Try to generate valid assignments (no one gets themselves)\n                while(!validAssignment && attempts < 100){\n                    attempts++;\n                    // Shuffle the receivers array\n                    for(let i = receivers.length - 1; i > 0; i--){\n                        const j = Math.floor(Math.random() * (i + 1));\n                        [receivers[i], receivers[j]] = [\n                            receivers[j],\n                            receivers[i]\n                        ];\n                    }\n                    // Check if any person got themselves\n                    const selfAssignment = givers.some((giver, index)=>giver === receivers[index]);\n                    if (!selfAssignment) {\n                        validAssignment = true;\n                        newAssignments = givers.map((giver, index)=>({\n                                id: Date.now().toString() + index,\n                                eventId: payload.eventId,\n                                giverId: giver,\n                                receiverId: receivers[index],\n                                created: new Date().toISOString()\n                            }));\n                    }\n                }\n                if (!validAssignment) {\n                    return res.status(500).json({\n                        error: \"Failed to generate valid assignments\"\n                    });\n                }\n                // Remove any existing assignments for this event\n                data.assignments = data.assignments.filter((a)=>a.eventId !== payload.eventId);\n                // Add new assignments\n                data.assignments.push(...newAssignments);\n                writeData(data);\n                return res.status(201).json(newAssignments);\n            default:\n                return res.status(400).json({\n                    error: \"Invalid type parameter\"\n                });\n        }\n    }\n    // Handle PUT request - update existing data\n    if (req.method === \"PUT\") {\n        const { type, id, userId, role } = req.query;\n        const payload = req.body;\n        if (!type || !id || !payload) {\n            return res.status(400).json({\n                error: \"Type parameter, ID, and request body are required\"\n            });\n        }\n        switch(type){\n            case \"users\":\n                // Users can only update their own data, admins can update any user\n                const userToUpdate = data.users.find((u)=>u.id === id);\n                if (!userToUpdate) {\n                    return res.status(404).json({\n                        error: \"User not found\"\n                    });\n                }\n                if (role !== \"admin\" && userId !== id) {\n                    return res.status(403).json({\n                        error: \"Unauthorized\"\n                    });\n                }\n                // Update user data\n                Object.assign(userToUpdate, payload);\n                writeData(data);\n                // Don't return the password in the response\n                const { password, ...userWithoutPassword } = userToUpdate;\n                return res.status(200).json(userWithoutPassword);\n            case \"events\":\n                // Only the event admin can update the event\n                const eventToUpdate = data.events.find((e)=>e.id === id);\n                if (!eventToUpdate) {\n                    return res.status(404).json({\n                        error: \"Event not found\"\n                    });\n                }\n                if (role !== \"admin\" && eventToUpdate.adminId !== userId) {\n                    return res.status(403).json({\n                        error: \"Only the event admin can update the event\"\n                    });\n                }\n                // Update event data\n                Object.assign(eventToUpdate, payload);\n                writeData(data);\n                return res.status(200).json(eventToUpdate);\n            default:\n                return res.status(400).json({\n                    error: \"Invalid type parameter\"\n                });\n        }\n    }\n    // Handle DELETE request - delete data\n    if (req.method === \"DELETE\") {\n        const { type, id, userId, role } = req.query;\n        if (!type || !id) {\n            return res.status(400).json({\n                error: \"Type parameter and ID are required\"\n            });\n        }\n        switch(type){\n            case \"users\":\n                // Only admins can delete users\n                if (role !== \"admin\") {\n                    return res.status(403).json({\n                        error: \"Only admins can delete users\"\n                    });\n                }\n                const userIndex = data.users.findIndex((u)=>u.id === id);\n                if (userIndex === -1) {\n                    return res.status(404).json({\n                        error: \"User not found\"\n                    });\n                }\n                // Delete user\n                const deletedUser = data.users.splice(userIndex, 1)[0];\n                writeData(data);\n                return res.status(200).json({\n                    message: \"User deleted successfully\",\n                    user: deletedUser\n                });\n            case \"events\":\n                // Only the event admin can delete the event\n                const eventIndex = data.events.findIndex((e)=>e.id === id);\n                if (eventIndex === -1) {\n                    return res.status(404).json({\n                        error: \"Event not found\"\n                    });\n                }\n                if (role !== \"admin\" && data.events[eventIndex].adminId !== userId) {\n                    return res.status(403).json({\n                        error: \"Only the event admin can delete the event\"\n                    });\n                }\n                // Delete event and its assignments\n                const deletedEvent = data.events.splice(eventIndex, 1)[0];\n                data.assignments = data.assignments.filter((a)=>a.eventId !== id);\n                writeData(data);\n                return res.status(200).json({\n                    message: \"Event deleted successfully\",\n                    event: deletedEvent\n                });\n            default:\n                return res.status(400).json({\n                    error: \"Invalid type parameter\"\n                });\n        }\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./pages/api/secret-santa/data.js\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fsecret-santa%2Fdata&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Fsecret-santa%2Fdata.js&middlewareConfigBase64=e30%3D!")));
module.exports = __webpack_exports__;

})();